{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red34\green139\blue34;}
\margl1440\margr1440\vieww24100\viewh12720\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\f0\b\fs32 \cf0 Basic Principles 
\b0 Our Code Must Follow:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\
1. It is highly 
\i readable.
\i0 \
	We follow \ul consistently\ulnone  a set of stylistic writing rules. E.g., the name of a class always starts with a capitalized character.\
	We choose variable names that reflect their usage as much as possible. \
	Except when efficiency is a critical factor, we favor readability than efficiency.\
\
2. It is well 
\i documented
\i0 . \
	For every function, class, script we share: we add comments explaining its logic and functionality.  Someone should fully understand the behavior of our code by reading 
\b only
\b0  the comments.  \
	On average expect to spend at least 1/3 of production time to document your code.\
\
3.  It is reusable. \
	Avoid writing the same \'91functionality\'92 multiple times in different places. Instead make a function out of it (even a small one) and call that.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\b \cf0 Style Rules
\b0 :\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 By adopting a 
\i common
\i0  style, our code becomes more homogenous, comparable and at the end -pretty-. Here are the 
\b RULES
\b0 , which you are expected to follow:\
\
	
\b All_Names
\b0  (in variables, functions, classes, everywhere).\
		Never use CamelCase.\
		Instead, 
\b whenever 
\b0 a variable is expressing 2 or more words, we join them via a single underscore character.  E.g., this_is_a_variable = 5;.\
	\
	
\b Function_Names
\b0 :\
		All characters of a function name are lower case.  function [] = this_is_an_ok_function_name()\
	\
	
\b Class_Names
\b0 :\
		Always starts with a capital letter. If it is comprised by many words, e.g., My_New_Class, start each one with a capital letter too.\
	\

\b 	Matrix Variables:
\b0 \
		If your variable represents a matrix and you decide to name the matrix with a 
\b single
\b0  letter, then it must be a capital. e.g., A = ones(1, 100);\
		Otherwise, avoid as much as possible naming variables with only a single letter. If you do so, never use a capital letter except for a matrix object.\
	\
	
\b Spacing:
\b0 \
		1. Avoid adding unnecessary white space between statements.  E.g.,  after a for/while/if statement don\'92t leave an empty line.\
				e.g., for i = 1:10\
						for j = 1:10\
							do_something;\
						end\
					end\
		2. Contrary to spacing rule 1., after the -
\i last end
\i0 - of a single (or many nested) for/whiles/if etc. leave an empty line. \
				e.g., 
\b for
\b0  i = 1:10\
						for j = 1:10\
							do_something;\
						end\
					
\b end
\b0 \
					% empty line.					\
					new_statement;\
\
		3. Line up (indent) \'93units\'94 of code together. E.g., see above how the two for/end match horizontally, and how the \'93do_something\'94 statement has been also 		indented once to distinguish it from the loops.\
\
		3. If you have a -block- of code within, say, a  function that serves some specialized utility (e.g., 
\i initialization
\i0  of variables), then it is also a good practice to 		separate it by leaving an empty line at the end of it. Also, in this case, a comment explaining what is going on in this block would be appropriate.\
	\
		4.  Whenever you are using an arithmetic operation like addition (+), assignment  (=), etc. leave a space between the two operands: e.g., var = 3 + 4;\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\b \cf0 Comment Rules
\b0 :\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 		User Documentation:
\b0 \
		ALWAYS documment a function or class that you implement. The documentation must be the first thing after the function/class declaration.\
		Start this first line like this:\
		<indent>  % <space> <small description of what the function/class does>.\
		% Input: <newline>\
		<indent> Start the list explaining the input variables. variable_name - (dimensions if appropriate) <explanation>.\
		Similarly, describe the output whenever is not completely obvious from the short description. Finally,  if something special needs to be noted, add a \'93Notes:\'94 		subsection.\
		Finally, leave an empty line and start the implementation.\
\
\pard\pardeftab720

\f1 \cf2 		function\cf0  [A] = area_of_triangles(V, T)\
                \cf3 % Computes the area of each triangle, in a triangular mesh.\cf0 \
                \cf3 % Input:\cf0 \
                \cf3 %           V  - (num_of_vertices x 3) 3D coordinates of\cf0 \
                \cf3 %           the mesh vertices.\cf0 \
                \cf3 %           T  - (num_of_triangles x 3) T[i] are the 3 indices\cf0 \
                \cf3 %           corresponding to the 3 vertices of the i-th\cf0 \
                \cf3 %           triangle. The indexing is based on -V-.                \cf0 \
                \cf3 % \cf0 \
                \cf3 % Output:   A - (num_of_triangles x 1) an array containing\cf0 \
                \cf3 %           the areas of all the triangles.\cf0 \
                \cf3 %\cf0 \
				 \cf3 % Notes:    An exception is returned if\'85 etc. \
\pard\pardeftab720
\cf0 \
                A = cross( V(T(:,1),:) - V(T(:,2),:), V(T(:,1),:) - V(T(:,3),:));           \cf3 % Shall we save these normals?                                        \cf0 \
                A = normv(A)/2;																  \

\fs30             \cf2 end\cf0   
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs32 \cf0 	\
\

\b 		Developer documentation:
\b0 , i.e., inline comments.\
		Write the comment as if it was a sentence in a book! Start with capital character and end it with a punctuation mark. \
		Also, if you want to refer to some variable\'92s name, one way to make it more distinguishable is to enclose it within two hyphens: % The -temp- is not secure.			}